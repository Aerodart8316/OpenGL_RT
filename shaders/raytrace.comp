#version 460 core

#extension GL_ARB_bindless_texture : require

struct Material
{
    vec3 albedo;
    vec3 emmision_color;
    float emmision_strength;
    float smoothness;
};

struct Vertex
{
    vec3 position;
    vec3 normal;
    vec2 tex_coords;
};

struct Mesh
{
    Material material;
    int root_node_index;
    int indices_index_offset;
    sampler2D albedo_texture_handle;
    sampler2D specular_texture_handle;
    sampler2D normal_texture_handle;
    mat4 model_matrix; // converts local coords to world
    mat4 inverse_model_matrix; // converts world coords to local
    int vertex_index_offset;
};

struct Ray
{
    vec3 origin;
    vec3 direction;
    vec3 inv_direction;
};

struct HitRecord
{
    bool front_face;
    bool hit;
    vec3 point;
    vec3 norm;
    float t;
    Material hit_material;
};

struct BVHNode
{
    vec3 bounds_min;
    vec3 bounds_max;
    int start_index;
    int triangle_count;
};


layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba32f, location = 0, binding = 0) writeonly uniform image2D img_output;

layout(std430, binding = 1) buffer vertices
{
    Vertex data_vertices[];
};
layout(std430, binding = 2) buffer indices
{
    int data_indices[];
};
layout(std430, binding = 3) buffer meshes
{
    Mesh data_meshes[];
};

layout(std430, binding = 5) buffer bvh_nodes
{
    BVHNode data_nodes[];
};

layout(std140, binding = 4) uniform camera
{
    vec3 camera_center;
    vec3 look_at;
    float fov;
    float focal_length;
};

uniform int sample_count;
uniform int bounce_count;
uniform int mesh_count;

const float INFINITY = 1.0f / 0.0f;
const float PI = 3.1415926535f;

#define GLOBAL_LIGHT vec3(0.2, 0.8, 1.0);
// #define GLOBAL_LIGHT vec3(0.005, 0.01, 0.02);
// #define GLOBAL_LIGHT vec3(0.005);

uint state;

float randomFloat()
{
    state *= (state + 195439) * (state + 124395) * (state + 845921);
    return state / 4294967295.0;
}

float random_normal_dist()
{
    float theta = 2 * 3.14159f * randomFloat();
    float rho = sqrt(-2 * log(randomFloat()));
    return rho * cos(theta);
}

vec3 random_on_sphere()
{
    return normalize(vec3(random_normal_dist(), random_normal_dist(), random_normal_dist()));
}

vec3 random_on_hemisphere(vec3 n)
{
    vec3 s = random_on_sphere();
    if(dot(s,n) > 0)
        return s;
    return -s;
}

vec2 random_in_circle()
{
    float angle = randomFloat() * 2 * PI;
    vec2 random_on_circle = vec2(cos(angle), sin(angle));
    return random_on_circle * sqrt(randomFloat());
}

vec3 at(Ray r, float dist)
{
    return r.origin + dist*r.direction;
}

HitRecord hit_triangle(int ind1, int ind2, int ind3, Ray r)
{
    Vertex vertA = data_vertices[ind1];
    Vertex vertB = data_vertices[ind2];
    Vertex vertC = data_vertices[ind3];

    vec3 edgeAB = vertB.position - vertA.position;
    vec3 edgeAC = vertC.position - vertA.position;

    vec3 normal_vec = cross(edgeAB,edgeAC);
    vec3 ao = r.origin - vertA.position;
    vec3 dao = cross(ao, r.direction);

    float det = -dot(r.direction, normal_vec);
    float inv_det = 1 / det;

    float dist = dot(ao, normal_vec) * inv_det;
    float u = dot(edgeAC, dao) * inv_det;
    float v = -dot(edgeAB, dao) * inv_det;
    float w = 1 - u - v;

    HitRecord result;
    result.hit = det >= 1e-6 && dist >= 0 && u >= 0 && v >= 0 && w >= 0;
    result.t = dist;
    result.point = at(r, dist);
    result.norm = normalize(vertA.normal * w + vertB.normal * u + vertC.normal * v);
    
    vec2 uv = vertA.tex_coords * w + vertB.tex_coords * u + vertC.tex_coords * v;
    result.hit_material.albedo = vec3(uv,0.0);
    result.hit_material.emmision_color = vec3(0.0);
    
    result.hit_material.emmision_strength = 0.0;
    result.hit_material.smoothness = 0.0;

    return result;
}

// Thanks to https://tavianator.com/2011/ray_box.html
float RayBoundingBoxDst(Ray ray, vec3 boxMin, vec3 boxMax)
{
    vec3 tMin = (boxMin - ray.origin) * ray.inv_direction;
    vec3 tMax = (boxMax - ray.origin) * ray.inv_direction;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);

    bool hit = tFar >= tNear && tFar > 0;
    float dst = hit ? tNear > 0 ? tNear : 0 : INFINITY;
    return dst;
};

bool hit_bounding_box(Ray ray, int box_index) // https://medium.com/@bromanz/another-view-on-the-classic-ray-aabb-intersection-algorithm-for-bvh-traversal-41125138b525
{
    vec3 t0s = (data_nodes[box_index].bounds_min - ray.origin) * ray.inv_direction;
    vec3 t1s = (data_nodes[box_index].bounds_max - ray.origin) * ray.inv_direction;

    vec3 tsmaller = min(t0s, t1s);
    vec3 tbigger = max(t0s, t1s);

    float tmin = max(tsmaller.x, max(tsmaller.y, tsmaller.z));
    float tmax = min(tbigger.x, min(tbigger.y, tbigger.z));

    return (tmin < tmax);
}

HitRecord hit_bvh_triangle(Ray ray, int mesh_index)
{
    int node_stack[64];
    int stack_index = 0;
    node_stack[stack_index++] = data_meshes[mesh_index].root_node_index;

    HitRecord result;
    result.t = INFINITY;
    result.hit = false;

    while(stack_index > 0)
    {
        int curr_node_index = node_stack[--stack_index];

        if(hit_bounding_box(ray, curr_node_index))
        {
            BVHNode curr_node = data_nodes[curr_node_index];
            if(curr_node.triangle_count != -1) // Leaf node check triangles
            {
                // HitRecord e;
                // e.hit = true;
                // e.t = 10.0f;
                // return e;
                for(int i = curr_node.start_index*3; i < curr_node.start_index*3 + curr_node.triangle_count*3;i+=3)
                {
                    HitRecord hr = hit_triangle(data_indices[i + data_meshes[mesh_index].indices_index_offset]+data_meshes[mesh_index].vertex_index_offset,data_indices[i+1 + data_meshes[mesh_index].indices_index_offset]+data_meshes[mesh_index].vertex_index_offset,data_indices[i+2 + data_meshes[mesh_index].indices_index_offset]+data_meshes[mesh_index].vertex_index_offset,ray);
                    if(hr.hit && hr.t < result.t)
                        result = hr;
                }
            }
            else
            {
                node_stack[stack_index++] = curr_node.start_index + data_meshes[mesh_index].root_node_index;
                node_stack[stack_index++] = curr_node.start_index + 1 + data_meshes[mesh_index].root_node_index;
            }
        }
    }
    return result;
}

HitRecord calculate_collision_bvh(Ray world_space_ray)
{
    HitRecord closest_hit;
    closest_hit.hit = false;
    float closest = INFINITY;

    Ray local_space_ray;

    for(int i = 0;i < mesh_count; i++)
    {
        local_space_ray.origin = (data_meshes[i].inverse_model_matrix * vec4(world_space_ray.origin, 1.0f)).xyz;
        local_space_ray.direction = (data_meshes[i].inverse_model_matrix * vec4(world_space_ray.direction, 0.0f)).xyz;
        local_space_ray.inv_direction = 1 / local_space_ray.direction;

        HitRecord hit_mesh = hit_bvh_triangle(local_space_ray, i);

        if(hit_mesh.hit && hit_mesh.t < closest)
        {
            closest = hit_mesh.t;
            closest_hit = hit_mesh;
            // closest_hit.norm = normalize(data_meshes[i].model_matrix * vec4(closest_hit.norm, 1)).xyz;
            // closest_hit.point = normalize(data_meshes[i].model_matrix * vec4(closest_hit.point, 1)).xyz;
            closest_hit.point = at(world_space_ray, closest_hit.t);
            closest_hit.norm = mat3(data_meshes[i].model_matrix) * closest_hit.norm;

            // Sample textures mesh from triangle UV coordinates stored in the HitRecord albedo
            vec2 tp = closest_hit.hit_material.albedo.xy;
            if(data_meshes[i].material.albedo.r == -1.0f)
                closest_hit.hit_material.albedo = texture(data_meshes[i].albedo_texture_handle, tp).rgb;
            else
                closest_hit.hit_material.albedo = data_meshes[i].material.albedo;
            if(data_meshes[i].material.smoothness == -1.0f)
                closest_hit.hit_material.smoothness = texture(data_meshes[i].specular_texture_handle, tp).r;
            else
                closest_hit.hit_material.smoothness = data_meshes[i].material.smoothness;
        }
    }
    
    return closest_hit;
}

vec3 trace_ray_bvh(vec3 ray_origin, vec3 ray_dir)
{
    vec3 ray_col = vec3(1);
    vec3 in_light = vec3(0);

    Ray ray;
    ray.origin = ray_origin;
    ray.direction = ray_dir;

    for(int bounce = 0; bounce <= bounce_count;bounce++)
    {
        HitRecord hit_rec = calculate_collision_bvh(ray);
        if(hit_rec.hit)
        {
            ray.origin = hit_rec.point;
            vec3 diffuse_dir = random_on_sphere() + hit_rec.norm;
            vec3 specular_dir = reflect(ray.direction, hit_rec.norm);
            ray.direction = mix(diffuse_dir,specular_dir,hit_rec.hit_material.smoothness);
            vec3 emmited_light = hit_rec.hit_material.emmision_color * hit_rec.hit_material.emmision_strength;
            in_light += emmited_light * ray_col;
            ray_col *= hit_rec.hit_material.albedo;
        }
        else
        {
            in_light += ray_col * GLOBAL_LIGHT;
            break;
        }
    }
    return in_light;
}

vec3 send_rays(vec3 viewport_location, vec3 u, vec3 v)
{
    vec3 pixel_color = vec3(0.0f,0.0f,0.0f);

    for(int i = 0; i < sample_count; i++)
    {
        vec2 defocus = random_in_circle() * 0.01f;
        vec3 origin = camera_center + u * defocus.x + v * defocus.y;
        vec3 direction = normalize(viewport_location - origin + random_on_sphere() * 0.002f);
        pixel_color += trace_ray_bvh(origin,direction);
    }
    return pixel_color / sample_count;
}

void main() {    
    ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 image_dimensions = imageSize(img_output);
    state = gl_GlobalInvocationID.x + image_dimensions.x * gl_GlobalInvocationID.y;

    vec3 w,u,v;
    w = normalize(camera_center - look_at);
    u = normalize(cross(vec3(0,1,0),w));
    v = cross(w,u);

    float theta = radians(fov);
    float viewport_height = 2 * focal_length * tan(theta / 2);
    float viewport_width = viewport_height * (float(image_dimensions.x) / image_dimensions.y);

    vec3 viewport_u = viewport_width * u;
    vec3 viewport_v = viewport_height * v;

    vec3 viewport_bottom_left = camera_center - focal_length * w - viewport_u/2 - viewport_v/2;

    vec3 viewport_location = viewport_bottom_left + texel_coord.x * (viewport_u/image_dimensions.x) + texel_coord.y * (viewport_v/image_dimensions.y);

    vec3 r_color = send_rays(viewport_location,u,v);
    imageStore(img_output, texel_coord, vec4(r_color, 1.0f));
}
